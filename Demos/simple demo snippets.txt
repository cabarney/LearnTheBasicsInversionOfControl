    public static class Factory
    {
        public static IShippingService CreateShippingService()
        {
            return new UpsShippingService();
        }

        public static IOrderProcessor CreateOrderProcessor()
        {
            return new OrderProcessor();
        }
    }







    public static class ServiceLocator
    {
        public static T GetService<T>() where T: class
        {
            switch (typeof (T).Name)
            {
                case "IShippingService":
                    return Factory.CreateShippingService() as T;
                case "IOrderProcessor":
                    return new OrderProcessor() as T;
            }
            return null;
        }
    }

    public class UpsShippingService : IShippingService
    {
        public string Key { get { return "UPS"; } }
        public string Name { get { return "UPS"; } }

        public void ShipOrder(Order order)
        {
            // Do shipping stuff
        }
    }
    public class FedExShippingService : IShippingService
    {
        public string Key { get { return "FedEx"; } }
        public string Name { get { return "Federal Express"; } }

        public void ShipOrder(Order order)
        {
            // Do shipping stuff
        }
    }


    public class OrderProcessor : IOrderProcessor
    {
        private readonly IEnumerable<IShippingService> _shippers;


        public OrderProcessor(IEnumerable<IShippingService> shippers)
        {
            _shippers = shippers;
        }

        public void ProcessOrder(Order order)
        {
            _shippers.Single(x=>x.Key == order.ShippingMethodKey).ShipOrder(order);
        }
    }





    public static class Factory
    {
        public static IEnumerable<IShippingService> CreateShippingServices()
        {
            return new List<IShippingService>
            {
                new UpsShippingService(),
                new FedExShippingService()
            };
        }

        public static IOrderProcessor CreateOrderProcessor()
        {
            return new OrderProcessor(CreateShippingServices());
        }
    }






    public class Injector
    {
        private readonly Dictionary<Type, Func<object>> _providers = new Dictionary<Type, Func<object>>();

        public T Resolve<T>()
        {
            return (T) Resolve(typeof(T));
        }

        private object Resolve(Type type)
        {
            Func<object> provider;
            if (_providers.TryGetValue(type, out provider))
                return provider();
            return ResolveByType(type);
        }

        private object ResolveByType(Type type)
        {
            var ctor = type.GetConstructors().SingleOrDefault();
            if(ctor == null)
                return Activator.CreateInstance(type);
            var args = ctor.GetParameters().Select(p => Resolve(p.ParameterType)).ToArray();
            return ctor.Invoke(args);
        }


        public void Register<T, TImpl>() where TImpl : T
        {
            _providers[typeof(T)] = () => ResolveByType(typeof(TImpl));
        }

        public void Register<T>(T instance)
        {
            _providers[typeof (T)] = () => instance;
        }
    }






            var ioc = new Injector();
            ioc.Register<IEnumerable<IShippingService>>(new List<IShippingService>
            {
                new UpsShippingService(),
                new FedExShippingService()
            });
            ioc.Register<IOrderProcessor, OrderProcessor>();

            var processor = ioc.Resolve<IOrderProcessor>();
            processor.ProcessOrder(sampleOrder);